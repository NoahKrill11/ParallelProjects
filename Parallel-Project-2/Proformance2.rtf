{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 This program is highly scalable for all four methods\
\
Choice =1\
Please enter the lower bound\
2\
Please enter the upper bound\
5\
\
Array Length: 1000\
Thread Count: 1; Each thread will process 1000 element(s)\
Total time 1 thread(s): 0.000055\
Speedup from 1 to 1 threads: 0.000055 / 0.000055 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 500 element(s)\
Total time 2 thread(s): 0.000105\
Speedup from 1 to 2 threads: 0.000055 / 0.000105 = 0.523810\
Efficiency from 1 to 2 threads: 0.523810 / 2 = 0.261905\
\
Thread Count: 4; Each thread will process 250 element(s)\
Total time 4 thread(s): 0.000309\
Speedup from 1 to 4 threads: 0.000055 / 0.000309 = 0.177994\
Efficiency from 1 to 4 threads: 0.177994 / 4 = 0.044498\
\
Thread Count: 8; Each thread will process 125 element(s)\
Total time 8 thread(s): 0.000686\
Speedup from 1 to 8 threads: 0.000055 / 0.000686 = 0.080175\
Efficiency from 1 to 8 threads: 0.080175 / 8 = 0.010022\
\
Thread Count: 16; Each thread will process 62 element(s)\
Total time 16 thread(s): 0.001463\
Speedup from 1 to 16 threads: 0.000055 / 0.001463 = 0.037594\
Efficiency from 1 to 16 threads: 0.037594 / 16 = 0.002350\
\
\
Array Length: 2000\
Thread Count: 1; Each thread will process 2000 element(s)\
Total time 1 thread(s): 0.001491\
Speedup from 1 to 1 threads: 0.001491 / 0.001491 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 1000 element(s)\
Total time 2 thread(s): 0.002277\
Speedup from 1 to 2 threads: 0.001491 / 0.002277 = 0.654809\
Efficiency from 1 to 2 threads: 0.654809 / 2 = 0.327404\
\
Thread Count: 4; Each thread will process 500 element(s)\
Total time 4 thread(s): 0.002351\
Speedup from 1 to 4 threads: 0.001491 / 0.002351 = 0.634198\
Efficiency from 1 to 4 threads: 0.634198 / 4 = 0.158550\
\
Thread Count: 8; Each thread will process 250 element(s)\
Total time 8 thread(s): 0.002633\
Speedup from 1 to 8 threads: 0.001491 / 0.002633 = 0.566274\
Efficiency from 1 to 8 threads: 0.566274 / 8 = 0.070784\
\
Thread Count: 16; Each thread will process 125 element(s)\
Total time 16 thread(s): 0.003138\
Speedup from 1 to 16 threads: 0.001491 / 0.003138 = 0.475143\
Efficiency from 1 to 16 threads: 0.475143 / 16 = 0.029696\
\
\
Array Length: 4000\
Thread Count: 1; Each thread will process 4000 element(s)\
Total time 1 thread(s): 0.003152\
Speedup from 1 to 1 threads: 0.003152 / 0.003152 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 2000 element(s)\
Total time 2 thread(s): 0.003193\
Speedup from 1 to 2 threads: 0.003152 / 0.003193 = 0.987159\
Efficiency from 1 to 2 threads: 0.987159 / 2 = 0.493580\
\
Thread Count: 4; Each thread will process 1000 element(s)\
Total time 4 thread(s): 0.003236\
Speedup from 1 to 4 threads: 0.003152 / 0.003236 = 0.974042\
Efficiency from 1 to 4 threads: 0.974042 / 4 = 0.243511\
\
Thread Count: 8; Each thread will process 500 element(s)\
Total time 8 thread(s): 0.003368\
Speedup from 1 to 8 threads: 0.003152 / 0.003368 = 0.935867\
Efficiency from 1 to 8 threads: 0.935867 / 8 = 0.116983\
\
Thread Count: 16; Each thread will process 250 element(s)\
Total time 16 thread(s): 0.003731\
Speedup from 1 to 16 threads: 0.003152 / 0.003731 = 0.844814\
Efficiency from 1 to 16 threads: 0.844814 / 16 = 0.052801\
\
\
Array Length: 8000\
Thread Count: 1; Each thread will process 8000 element(s)\
Total time 1 thread(s): 0.003744\
Speedup from 1 to 1 threads: 0.003744 / 0.003744 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 4000 element(s)\
Total time 2 thread(s): 0.003768\
Speedup from 1 to 2 threads: 0.003744 / 0.003768 = 0.993631\
Efficiency from 1 to 2 threads: 0.993631 / 2 = 0.496815\
\
Thread Count: 4; Each thread will process 2000 element(s)\
Total time 4 thread(s): 0.003807\
Speedup from 1 to 4 threads: 0.003744 / 0.003807 = 0.983452\
Efficiency from 1 to 4 threads: 0.983452 / 4 = 0.245863\
\
Thread Count: 8; Each thread will process 1000 element(s)\
Total time 8 thread(s): 0.003875\
Speedup from 1 to 8 threads: 0.003744 / 0.003875 = 0.966194\
Efficiency from 1 to 8 threads: 0.966194 / 8 = 0.120774\
\
Thread Count: 16; Each thread will process 500 element(s)\
Total time 16 thread(s): 0.004078\
Speedup from 1 to 16 threads: 0.003744 / 0.004078 = 0.918097\
Efficiency from 1 to 16 threads: 0.918097 / 16 = 0.057381\
\
\
Array Length: 16000\
Thread Count: 1; Each thread will process 16000 element(s)\
Total time 1 thread(s): 0.004089\
Speedup from 1 to 1 threads: 0.004089 / 0.004089 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 8000 element(s)\
Total time 2 thread(s): 0.004109\
Speedup from 1 to 2 threads: 0.004089 / 0.004109 = 0.995133\
Efficiency from 1 to 2 threads: 0.995133 / 2 = 0.497566\
\
Thread Count: 4; Each thread will process 4000 element(s)\
Total time 4 thread(s): 0.004148\
Speedup from 1 to 4 threads: 0.004089 / 0.004148 = 0.985776\
Efficiency from 1 to 4 threads: 0.985776 / 4 = 0.246444\
\
Thread Count: 8; Each thread will process 2000 element(s)\
Total time 8 thread(s): 0.004223\
Speedup from 1 to 8 threads: 0.004089 / 0.004223 = 0.968269\
Efficiency from 1 to 8 threads: 0.968269 / 8 = 0.121034\
\
Thread Count: 16; Each thread will process 1000 element(s)\
Total time 16 thread(s): 0.004444\
Speedup from 1 to 16 threads: 0.004089 / 0.004444 = 0.920117\
Efficiency from 1 to 16 threads: 0.920117 / 16 = 0.057507\
\
The value of sum is 1417548731761830375\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Choice = 2\
Please enter the lower bound\
3\
Please enter the upper bound\
5\
\
Array Length: 1000\
Thread Count: 1; Each thread will process 1000 element(s)\
Total time 1 thread(s): 0.000054\
Speedup from 1 to 1 threads: 0.000054 / 0.000054 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 500 element(s)\
Total time 2 thread(s): 0.000105\
Speedup from 1 to 2 threads: 0.000054 / 0.000105 = 0.514286\
Efficiency from 1 to 2 threads: 0.514286 / 2 = 0.257143\
\
Thread Count: 4; Each thread will process 250 element(s)\
Total time 4 thread(s): 0.000403\
Speedup from 1 to 4 threads: 0.000054 / 0.000403 = 0.133995\
Efficiency from 1 to 4 threads: 0.133995 / 4 = 0.033499\
\
Thread Count: 8; Each thread will process 125 element(s)\
Total time 8 thread(s): 0.000763\
Speedup from 1 to 8 threads: 0.000054 / 0.000763 = 0.070773\
Efficiency from 1 to 8 threads: 0.070773 / 8 = 0.008847\
\
Thread Count: 16; Each thread will process 62 element(s)\
Total time 16 thread(s): 0.002425\
Speedup from 1 to 16 threads: 0.000054 / 0.002425 = 0.022268\
Efficiency from 1 to 16 threads: 0.022268 / 16 = 0.001392\
\
\
Array Length: 2000\
Thread Count: 1; Each thread will process 2000 element(s)\
Total time 1 thread(s): 0.002442\
Speedup from 1 to 1 threads: 0.002442 / 0.002442 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 1000 element(s)\
Total time 2 thread(s): 0.002545\
Speedup from 1 to 2 threads: 0.002442 / 0.002545 = 0.959528\
Efficiency from 1 to 2 threads: 0.959528 / 2 = 0.479764\
\
Thread Count: 4; Each thread will process 500 element(s)\
Total time 4 thread(s): 0.002634\
Speedup from 1 to 4 threads: 0.002442 / 0.002634 = 0.927107\
Efficiency from 1 to 4 threads: 0.927107 / 4 = 0.231777\
\
Thread Count: 8; Each thread will process 250 element(s)\
Total time 8 thread(s): 0.002801\
Speedup from 1 to 8 threads: 0.002442 / 0.002801 = 0.871831\
Efficiency from 1 to 8 threads: 0.871831 / 8 = 0.108979\
\
Thread Count: 16; Each thread will process 125 element(s)\
Total time 16 thread(s): 0.003073\
Speedup from 1 to 16 threads: 0.002442 / 0.003073 = 0.794663\
Efficiency from 1 to 16 threads: 0.794663 / 16 = 0.049666\
\
\
Array Length: 4000\
Thread Count: 1; Each thread will process 4000 element(s)\
Total time 1 thread(s): 0.003088\
Speedup from 1 to 1 threads: 0.003088 / 0.003088 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 2000 element(s)\
Total time 2 thread(s): 0.003109\
Speedup from 1 to 2 threads: 0.003088 / 0.003109 = 0.993245\
Efficiency from 1 to 2 threads: 0.993245 / 2 = 0.496623\
\
Thread Count: 4; Each thread will process 1000 element(s)\
Total time 4 thread(s): 0.003157\
Speedup from 1 to 4 threads: 0.003088 / 0.003157 = 0.978144\
Efficiency from 1 to 4 threads: 0.978144 / 4 = 0.244536\
\
Thread Count: 8; Each thread will process 500 element(s)\
Total time 8 thread(s): 0.003264\
Speedup from 1 to 8 threads: 0.003088 / 0.003264 = 0.946078\
Efficiency from 1 to 8 threads: 0.946078 / 8 = 0.118260\
\
Thread Count: 16; Each thread will process 250 element(s)\
Total time 16 thread(s): 0.003586\
Speedup from 1 to 16 threads: 0.003088 / 0.003586 = 0.861127\
Efficiency from 1 to 16 threads: 0.861127 / 16 = 0.053820\
\
\
Array Length: 8000\
Thread Count: 1; Each thread will process 8000 element(s)\
Total time 1 thread(s): 0.003598\
Speedup from 1 to 1 threads: 0.003598 / 0.003598 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 4000 element(s)\
Total time 2 thread(s): 0.003623\
Speedup from 1 to 2 threads: 0.003598 / 0.003623 = 0.993100\
Efficiency from 1 to 2 threads: 0.993100 / 2 = 0.496550\
\
Thread Count: 4; Each thread will process 2000 element(s)\
Total time 4 thread(s): 0.003668\
Speedup from 1 to 4 threads: 0.003598 / 0.003668 = 0.980916\
Efficiency from 1 to 4 threads: 0.980916 / 4 = 0.245229\
\
Thread Count: 8; Each thread will process 1000 element(s)\
Total time 8 thread(s): 0.003746\
Speedup from 1 to 8 threads: 0.003598 / 0.003746 = 0.960491\
Efficiency from 1 to 8 threads: 0.960491 / 8 = 0.120061\
\
Thread Count: 16; Each thread will process 500 element(s)\
Total time 16 thread(s): 0.003919\
Speedup from 1 to 16 threads: 0.003598 / 0.003919 = 0.918091\
Efficiency from 1 to 16 threads: 0.918091 / 16 = 0.057381\
\
\
Array Length: 16000\
Thread Count: 1; Each thread will process 16000 element(s)\
Total time 1 thread(s): 0.003932\
Speedup from 1 to 1 threads: 0.003932 / 0.003932 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 8000 element(s)\
Total time 2 thread(s): 0.003952\
Speedup from 1 to 2 threads: 0.003932 / 0.003952 = 0.994939\
Efficiency from 1 to 2 threads: 0.994939 / 2 = 0.497470\
\
Thread Count: 4; Each thread will process 4000 element(s)\
Total time 4 thread(s): 0.003992\
Speedup from 1 to 4 threads: 0.003932 / 0.003992 = 0.984970\
Efficiency from 1 to 4 threads: 0.984970 / 4 = 0.246242\
\
Thread Count: 8; Each thread will process 2000 element(s)\
Total time 8 thread(s): 0.004062\
Speedup from 1 to 8 threads: 0.003932 / 0.004062 = 0.967996\
Efficiency from 1 to 8 threads: 0.967996 / 8 = 0.121000\
\
Thread Count: 16; Each thread will process 1000 element(s)\
Total time 16 thread(s): 0.004214\
Speedup from 1 to 16 threads: 0.003932 / 0.004214 = 0.933080\
Efficiency from 1 to 16 threads: 0.933080 / 16 = 0.058318\
\
The value of sum is 6767194010333845629\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Choice = 3\
Please enter the lower bound\
3\
Please enter the upper bound\
5\
\
Array Length: 1000\
Thread Count: 1; Each thread will process 1000 element(s)\
Total time 1 thread(s): 0.000125\
Speedup from 1 to 1 threads: 0.000125 / 0.000125 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 500 element(s)\
Total time 2 thread(s): 0.000177\
Speedup from 1 to 2 threads: 0.000125 / 0.000177 = 0.706215\
Efficiency from 1 to 2 threads: 0.706215 / 2 = 0.353107\
\
Thread Count: 4; Each thread will process 250 element(s)\
Total time 4 thread(s): 0.000511\
Speedup from 1 to 4 threads: 0.000125 / 0.000511 = 0.244618\
Efficiency from 1 to 4 threads: 0.244618 / 4 = 0.061155\
\
Thread Count: 8; Each thread will process 125 element(s)\
Total time 8 thread(s): 0.000632\
Speedup from 1 to 8 threads: 0.000125 / 0.000632 = 0.197785\
Efficiency from 1 to 8 threads: 0.197785 / 8 = 0.024723\
\
Thread Count: 16; Each thread will process 62 element(s)\
Total time 16 thread(s): 0.000959\
Speedup from 1 to 16 threads: 0.000125 / 0.000959 = 0.130344\
Efficiency from 1 to 16 threads: 0.130344 / 16 = 0.008147\
\
\
Array Length: 2000\
Thread Count: 1; Each thread will process 2000 element(s)\
Total time 1 thread(s): 0.000973\
Speedup from 1 to 1 threads: 0.000973 / 0.000973 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 1000 element(s)\
Total time 2 thread(s): 0.001024\
Speedup from 1 to 2 threads: 0.000973 / 0.001024 = 0.950195\
Efficiency from 1 to 2 threads: 0.950195 / 2 = 0.475098\
\
Thread Count: 4; Each thread will process 500 element(s)\
Total time 4 thread(s): 0.001063\
Speedup from 1 to 4 threads: 0.000973 / 0.001063 = 0.915334\
Efficiency from 1 to 4 threads: 0.915334 / 4 = 0.228833\
\
Thread Count: 8; Each thread will process 250 element(s)\
Total time 8 thread(s): 0.001162\
Speedup from 1 to 8 threads: 0.000973 / 0.001162 = 0.837349\
Efficiency from 1 to 8 threads: 0.837349 / 8 = 0.104669\
\
Thread Count: 16; Each thread will process 125 element(s)\
Total time 16 thread(s): 0.001459\
Speedup from 1 to 16 threads: 0.000973 / 0.001459 = 0.666895\
Efficiency from 1 to 16 threads: 0.666895 / 16 = 0.041681\
\
\
Array Length: 4000\
Thread Count: 1; Each thread will process 4000 element(s)\
Total time 1 thread(s): 0.001471\
Speedup from 1 to 1 threads: 0.001471 / 0.001471 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 2000 element(s)\
Total time 2 thread(s): 0.001491\
Speedup from 1 to 2 threads: 0.001471 / 0.001491 = 0.986586\
Efficiency from 1 to 2 threads: 0.986586 / 2 = 0.493293\
\
Thread Count: 4; Each thread will process 1000 element(s)\
Total time 4 thread(s): 0.001530\
Speedup from 1 to 4 threads: 0.001471 / 0.001530 = 0.961438\
Efficiency from 1 to 4 threads: 0.961438 / 4 = 0.240359\
\
Thread Count: 8; Each thread will process 500 element(s)\
Total time 8 thread(s): 0.001739\
Speedup from 1 to 8 threads: 0.001471 / 0.001739 = 0.845888\
Efficiency from 1 to 8 threads: 0.845888 / 8 = 0.105736\
\
Thread Count: 16; Each thread will process 250 element(s)\
Total time 16 thread(s): 0.001996\
Speedup from 1 to 16 threads: 0.001471 / 0.001996 = 0.736974\
Efficiency from 1 to 16 threads: 0.736974 / 16 = 0.046061\
\
\
Array Length: 8000\
Thread Count: 1; Each thread will process 8000 element(s)\
Total time 1 thread(s): 0.002007\
Speedup from 1 to 1 threads: 0.002007 / 0.002007 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 4000 element(s)\
Total time 2 thread(s): 0.002026\
Speedup from 1 to 2 threads: 0.002007 / 0.002026 = 0.990622\
Efficiency from 1 to 2 threads: 0.990622 / 2 = 0.495311\
\
Thread Count: 4; Each thread will process 2000 element(s)\
Total time 4 thread(s): 0.002066\
Speedup from 1 to 4 threads: 0.002007 / 0.002066 = 0.971442\
Efficiency from 1 to 4 threads: 0.971442 / 4 = 0.242861\
\
Thread Count: 8; Each thread will process 1000 element(s)\
Total time 8 thread(s): 0.002131\
Speedup from 1 to 8 threads: 0.002007 / 0.002131 = 0.941811\
Efficiency from 1 to 8 threads: 0.941811 / 8 = 0.117726\
\
Thread Count: 16; Each thread will process 500 element(s)\
Total time 16 thread(s): 0.002543\
Speedup from 1 to 16 threads: 0.002007 / 0.002543 = 0.789225\
Efficiency from 1 to 16 threads: 0.789225 / 16 = 0.049327\
\
\
Array Length: 16000\
Thread Count: 1; Each thread will process 16000 element(s)\
Total time 1 thread(s): 0.002554\
Speedup from 1 to 1 threads: 0.002554 / 0.002554 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 8000 element(s)\
Total time 2 thread(s): 0.002573\
Speedup from 1 to 2 threads: 0.002554 / 0.002573 = 0.992616\
Efficiency from 1 to 2 threads: 0.992616 / 2 = 0.496308\
\
Thread Count: 4; Each thread will process 4000 element(s)\
Total time 4 thread(s): 0.002835\
Speedup from 1 to 4 threads: 0.002554 / 0.002835 = 0.900882\
Efficiency from 1 to 4 threads: 0.900882 / 4 = 0.225220\
\
Thread Count: 8; Each thread will process 2000 element(s)\
Total time 8 thread(s): 0.002900\
Speedup from 1 to 8 threads: 0.002554 / 0.002900 = 0.880690\
Efficiency from 1 to 8 threads: 0.880690 / 8 = 0.110086\
\
Thread Count: 16; Each thread will process 1000 element(s)\
Total time 16 thread(s): 0.003120\
Speedup from 1 to 16 threads: 0.002554 / 0.003120 = 0.818590\
Efficiency from 1 to 16 threads: 0.818590 / 16 = 0.051162\
\
The value of sum is 4058521547136194400\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Choice = 4 \
Please enter the lower bound\
2\
Please enter the upper bound\
5\
\
Array Length: 1000\
Thread Count: 1; Each thread will process 1000 element(s)\
Total time 1 thread(s): 0.000073\
Speedup from 1 to 1 threads: 0.000073 / 0.000073 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 500 element(s)\
Total time 2 thread(s): 0.000113\
Speedup from 1 to 2 threads: 0.000073 / 0.000113 = 0.646018\
Efficiency from 1 to 2 threads: 0.646018 / 2 = 0.323009\
\
Thread Count: 4; Each thread will process 250 element(s)\
Total time 4 thread(s): 0.000173\
Speedup from 1 to 4 threads: 0.000073 / 0.000173 = 0.421965\
Efficiency from 1 to 4 threads: 0.421965 / 4 = 0.105491\
\
Thread Count: 8; Each thread will process 125 element(s)\
Total time 8 thread(s): 0.000285\
Speedup from 1 to 8 threads: 0.000073 / 0.000285 = 0.256140\
Efficiency from 1 to 8 threads: 0.256140 / 8 = 0.032018\
\
Thread Count: 16; Each thread will process 62 element(s)\
Total time 16 thread(s): 0.000495\
Speedup from 1 to 16 threads: 0.000073 / 0.000495 = 0.147475\
Efficiency from 1 to 16 threads: 0.147475 / 16 = 0.009217\
\
\
Array Length: 2000\
Thread Count: 1; Each thread will process 2000 element(s)\
Total time 1 thread(s): 0.000508\
Speedup from 1 to 1 threads: 0.000508 / 0.000508 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 1000 element(s)\
Total time 2 thread(s): 0.000530\
Speedup from 1 to 2 threads: 0.000508 / 0.000530 = 0.958491\
Efficiency from 1 to 2 threads: 0.958491 / 2 = 0.479245\
\
Thread Count: 4; Each thread will process 500 element(s)\
Total time 4 thread(s): 0.000564\
Speedup from 1 to 4 threads: 0.000508 / 0.000564 = 0.900709\
Efficiency from 1 to 4 threads: 0.900709 / 4 = 0.225177\
\
Thread Count: 8; Each thread will process 250 element(s)\
Total time 8 thread(s): 0.000685\
Speedup from 1 to 8 threads: 0.000508 / 0.000685 = 0.741606\
Efficiency from 1 to 8 threads: 0.741606 / 8 = 0.092701\
\
Thread Count: 16; Each thread will process 125 element(s)\
Total time 16 thread(s): 0.000895\
Speedup from 1 to 16 threads: 0.000508 / 0.000895 = 0.567598\
Efficiency from 1 to 16 threads: 0.567598 / 16 = 0.035475\
\
\
Array Length: 4000\
Thread Count: 1; Each thread will process 4000 element(s)\
Total time 1 thread(s): 0.000905\
Speedup from 1 to 1 threads: 0.000905 / 0.000905 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 2000 element(s)\
Total time 2 thread(s): 0.000928\
Speedup from 1 to 2 threads: 0.000905 / 0.000928 = 0.975216\
Efficiency from 1 to 2 threads: 0.975216 / 2 = 0.487608\
\
Thread Count: 4; Each thread will process 1000 element(s)\
Total time 4 thread(s): 0.000969\
Speedup from 1 to 4 threads: 0.000905 / 0.000969 = 0.933953\
Efficiency from 1 to 4 threads: 0.933953 / 4 = 0.233488\
\
Thread Count: 8; Each thread will process 500 element(s)\
Total time 8 thread(s): 0.001058\
Speedup from 1 to 8 threads: 0.000905 / 0.001058 = 0.855388\
Efficiency from 1 to 8 threads: 0.855388 / 8 = 0.106923\
\
Thread Count: 16; Each thread will process 250 element(s)\
Total time 16 thread(s): 0.001207\
Speedup from 1 to 16 threads: 0.000905 / 0.001207 = 0.749793\
Efficiency from 1 to 16 threads: 0.749793 / 16 = 0.046862\
\
\
Array Length: 8000\
Thread Count: 1; Each thread will process 8000 element(s)\
Total time 1 thread(s): 0.001230\
Speedup from 1 to 1 threads: 0.001230 / 0.001230 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 4000 element(s)\
Total time 2 thread(s): 0.001247\
Speedup from 1 to 2 threads: 0.001230 / 0.001247 = 0.986367\
Efficiency from 1 to 2 threads: 0.986367 / 2 = 0.493184\
\
Thread Count: 4; Each thread will process 2000 element(s)\
Total time 4 thread(s): 0.001279\
Speedup from 1 to 4 threads: 0.001230 / 0.001279 = 0.961689\
Efficiency from 1 to 4 threads: 0.961689 / 4 = 0.240422\
\
Thread Count: 8; Each thread will process 1000 element(s)\
Total time 8 thread(s): 0.001351\
Speedup from 1 to 8 threads: 0.001230 / 0.001351 = 0.910437\
Efficiency from 1 to 8 threads: 0.910437 / 8 = 0.113805\
\
Thread Count: 16; Each thread will process 500 element(s)\
Total time 16 thread(s): 0.001519\
Speedup from 1 to 16 threads: 0.001230 / 0.001519 = 0.809743\
Efficiency from 1 to 16 threads: 0.809743 / 16 = 0.050609\
\
\
Array Length: 16000\
Thread Count: 1; Each thread will process 16000 element(s)\
Total time 1 thread(s): 0.001533\
Speedup from 1 to 1 threads: 0.001533 / 0.001533 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 8000 element(s)\
Total time 2 thread(s): 0.001558\
Speedup from 1 to 2 threads: 0.001533 / 0.001558 = 0.983954\
Efficiency from 1 to 2 threads: 0.983954 / 2 = 0.491977\
\
Thread Count: 4; Each thread will process 4000 element(s)\
Total time 4 thread(s): 0.001627\
Speedup from 1 to 4 threads: 0.001533 / 0.001627 = 0.942225\
Efficiency from 1 to 4 threads: 0.942225 / 4 = 0.235556\
\
Thread Count: 8; Each thread will process 2000 element(s)\
Total time 8 thread(s): 0.001698\
Speedup from 1 to 8 threads: 0.001533 / 0.001698 = 0.902827\
Efficiency from 1 to 8 threads: 0.902827 / 8 = 0.112853\
\
Thread Count: 16; Each thread will process 1000 element(s)\
Total time 16 thread(s): 0.001845\
Speedup from 1 to 16 threads: 0.001533 / 0.001845 = 0.830894\
Efficiency from 1 to 16 threads: 0.830894 / 16 = 0.051931\
\
The value of sum is 7818610488627186924\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Choice = 5\
Please enter the lower bound\
3\
Please enter the upper bound\
5\
\
Array Length: 1000\
Thread Count: 1; Each thread will process 1000 element(s)\
Total time 1 thread(s): 0.000049\
Speedup from 1 to 1 threads: 0.000049 / 0.000049 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 500 element(s)\
Total time 2 thread(s): 0.000096\
Speedup from 1 to 2 threads: 0.000049 / 0.000096 = 0.510417\
Efficiency from 1 to 2 threads: 0.510417 / 2 = 0.255208\
\
Thread Count: 4; Each thread will process 250 element(s)\
Total time 4 thread(s): 0.000155\
Speedup from 1 to 4 threads: 0.000049 / 0.000155 = 0.316129\
Efficiency from 1 to 4 threads: 0.316129 / 4 = 0.079032\
\
Thread Count: 8; Each thread will process 125 element(s)\
Total time 8 thread(s): 0.000236\
Speedup from 1 to 8 threads: 0.000049 / 0.000236 = 0.207627\
Efficiency from 1 to 8 threads: 0.207627 / 8 = 0.025953\
\
Thread Count: 16; Each thread will process 62 element(s)\
Total time 16 thread(s): 0.000433\
Speedup from 1 to 16 threads: 0.000049 / 0.000433 = 0.113164\
Efficiency from 1 to 16 threads: 0.113164 / 16 = 0.007073\
\
\
Array Length: 2000\
Thread Count: 1; Each thread will process 2000 element(s)\
Total time 1 thread(s): 0.000444\
Speedup from 1 to 1 threads: 0.000444 / 0.000444 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 1000 element(s)\
Total time 2 thread(s): 0.000463\
Speedup from 1 to 2 threads: 0.000444 / 0.000463 = 0.958963\
Efficiency from 1 to 2 threads: 0.958963 / 2 = 0.479482\
\
Thread Count: 4; Each thread will process 500 element(s)\
Total time 4 thread(s): 0.000516\
Speedup from 1 to 4 threads: 0.000444 / 0.000516 = 0.860465\
Efficiency from 1 to 4 threads: 0.860465 / 4 = 0.215116\
\
Thread Count: 8; Each thread will process 250 element(s)\
Total time 8 thread(s): 0.000628\
Speedup from 1 to 8 threads: 0.000444 / 0.000628 = 0.707006\
Efficiency from 1 to 8 threads: 0.707006 / 8 = 0.088376\
\
Thread Count: 16; Each thread will process 125 element(s)\
Total time 16 thread(s): 0.000934\
Speedup from 1 to 16 threads: 0.000444 / 0.000934 = 0.475375\
Efficiency from 1 to 16 threads: 0.475375 / 16 = 0.029711\
\
\
Array Length: 4000\
Thread Count: 1; Each thread will process 4000 element(s)\
Total time 1 thread(s): 0.000948\
Speedup from 1 to 1 threads: 0.000948 / 0.000948 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 2000 element(s)\
Total time 2 thread(s): 0.000969\
Speedup from 1 to 2 threads: 0.000948 / 0.000969 = 0.978328\
Efficiency from 1 to 2 threads: 0.978328 / 2 = 0.489164\
\
Thread Count: 4; Each thread will process 1000 element(s)\
Total time 4 thread(s): 0.001013\
Speedup from 1 to 4 threads: 0.000948 / 0.001013 = 0.935834\
Efficiency from 1 to 4 threads: 0.935834 / 4 = 0.233959\
\
Thread Count: 8; Each thread will process 500 element(s)\
Total time 8 thread(s): 0.001085\
Speedup from 1 to 8 threads: 0.000948 / 0.001085 = 0.873733\
Efficiency from 1 to 8 threads: 0.873733 / 8 = 0.109217\
\
Thread Count: 16; Each thread will process 250 element(s)\
Total time 16 thread(s): 0.001348\
Speedup from 1 to 16 threads: 0.000948 / 0.001348 = 0.703264\
Efficiency from 1 to 16 threads: 0.703264 / 16 = 0.043954\
\
\
Array Length: 8000\
Thread Count: 1; Each thread will process 8000 element(s)\
Total time 1 thread(s): 0.001361\
Speedup from 1 to 1 threads: 0.001361 / 0.001361 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 4000 element(s)\
Total time 2 thread(s): 0.001380\
Speedup from 1 to 2 threads: 0.001361 / 0.001380 = 0.986232\
Efficiency from 1 to 2 threads: 0.986232 / 2 = 0.493116\
\
Thread Count: 4; Each thread will process 2000 element(s)\
Total time 4 thread(s): 0.001507\
Speedup from 1 to 4 threads: 0.001361 / 0.001507 = 0.903119\
Efficiency from 1 to 4 threads: 0.903119 / 4 = 0.225780\
\
Thread Count: 8; Each thread will process 1000 element(s)\
Total time 8 thread(s): 0.001719\
Speedup from 1 to 8 threads: 0.001361 / 0.001719 = 0.791739\
Efficiency from 1 to 8 threads: 0.791739 / 8 = 0.098967\
\
Thread Count: 16; Each thread will process 500 element(s)\
Total time 16 thread(s): 0.001862\
Speedup from 1 to 16 threads: 0.001361 / 0.001862 = 0.730934\
Efficiency from 1 to 16 threads: 0.730934 / 16 = 0.045683\
\
\
Array Length: 16000\
Thread Count: 1; Each thread will process 16000 element(s)\
Total time 1 thread(s): 0.001877\
Speedup from 1 to 1 threads: 0.001877 / 0.001877 = 1.000000\
Efficiency from 1 to 1 threads: 1.000000 / 1 = 1.000000\
\
Thread Count: 2; Each thread will process 8000 element(s)\
Total time 2 thread(s): 0.001896\
Speedup from 1 to 2 threads: 0.001877 / 0.001896 = 0.989979\
Efficiency from 1 to 2 threads: 0.989979 / 2 = 0.494989\
\
Thread Count: 4; Each thread will process 4000 element(s)\
Total time 4 thread(s): 0.001978\
Speedup from 1 to 4 threads: 0.001877 / 0.001978 = 0.948938\
Efficiency from 1 to 4 threads: 0.948938 / 4 = 0.237235\
\
Thread Count: 8; Each thread will process 2000 element(s)\
Total time 8 thread(s): 0.002162\
Speedup from 1 to 8 threads: 0.001877 / 0.002162 = 0.868178\
Efficiency from 1 to 8 threads: 0.868178 / 8 = 0.108522\
\
Thread Count: 16; Each thread will process 1000 element(s)\
Total time 16 thread(s): 0.002302\
Speedup from 1 to 16 threads: 0.001877 / 0.002302 = 0.815378\
Efficiency from 1 to 16 threads: 0.815378 / 16 = 0.050961\
\
The value of sum is 7635544361942461351\
}